name: Azurite Upload and SAS Token Generation

on:
  workflow_dispatch:

jobs:
  upload-to-azurite:
    runs-on: ubuntu-latest
    services:
      azurite:
        image: mcr.microsoft.com/azure-storage/azurite
        ports:
          - 10000:10000
        options: --health-cmd "curl -f http://localhost:10000" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Azure Storage CLI
      run: |
        npm install -g azure-storage

    - name: Create test file
      run: echo "Hello from GitHub Actions!" > testfile.txt

    - name: Upload to Azurite
      run: |
        node <<EOF
        const azure = require('azure-storage');
        const blobService = azure.createBlobService('devstoreaccount1', 'Eby8vdM02xNOcqFeqCnf2J==', 'http://127.0.0.1:10000/devstoreaccount1');

        const containerName = 'testcontainer';
        const blobName = 'testfile.txt';

        blobService.createContainerIfNotExists(containerName, { publicAccessLevel: 'blob' }, (err) => {
          if (err) throw err;

          blobService.createBlockBlobFromLocalFile(containerName, blobName, 'testfile.txt', (err) => {
            if (err) throw err;
            console.log('File uploaded successfully.');

            const startDate = new Date();
            const expiryDate = new Date(startDate);
            expiryDate.setMinutes(startDate.getMinutes() + 60);

            const sharedAccessPolicy = {
              AccessPolicy: {
                Permissions: azure.BlobUtilities.SharedAccessPermissions.READ,
                Start: startDate,
                Expiry: expiryDate
              }
            };

            const sasToken = blobService.generateSharedAccessSignature(containerName, blobName, sharedAccessPolicy);
            const sasUrl = blobService.getUrl(containerName, blobName, sasToken);
            console.log('SAS URL:', sasUrl);
          });
        });
        EOF