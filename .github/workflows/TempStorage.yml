name: Azurite Integration Tests

on:
  workflow_dispatch:

jobs:
  azurite-tests:
    runs-on: ubuntu-latest # You can specify other runners like windows-latest or macOS-latest
    steps:
    - uses: actions/checkout@v3 # Checks out your repository code

    # Install and run Azurite
    - name: Install Azurite
      id: azurite # Give this step an ID to reference its outputs
      uses: potatoqualitee/azuright@v1.1 # Using the Azurite GitHub Action
      with:
        # Optional: Customize Azurite ports or enable HTTPS
        # blob-port: 10000 
        # queue-port: 10001
        # table-port: 10002
        self-signed-cert: true # Example: enable HTTPS with a self-signed certificate

    # Optional: If your tests require specific PowerShell modules, install them
    - name: Install and cache PowerShell Modules
      uses: potatoqualitee/psmodulecache@v4
      with:
        modules-to-cache: Az.Storage 

    # Example: Run tests against the Azurite storage
    - name: Run application tests
      shell: pwsh # Using PowerShell for this example, you can use your preferred shell
      run: |
        Import-Module Az.Storage # Imports Azure Storage PowerShell module
        $connstring = "${{ steps.azurite.outputs.connstring }}" # Retrieves the connection string from Azurite output

        # You can now connect to Azurite services using this connection string
        # and run your application's tests against it.
        # This example creates a blob container for demonstration.
        $blob = New-Object Azure.Storage.Blobs.BlobContainerClient($connstring, "sample-container")
        $blob.CreateIfNotExists()
        # Your actual test commands would go here, e.g., running unit tests or integration tests that interact with storage
        # For instance: 
        # dotnet test your_project/YourTests.csproj 
        # npm test

    # Example: Perform cleanup or additional actions
    - name: Cleanup
      shell: pwsh
      run: |
        # After testing, you can perform cleanup actions like deleting containers or blobs created during testing.
        # This example shows deleting the container created earlier. 
        # $blob.DeleteIfExists()
        echo "Tests complete, optionally cleanup Azurite data if not using in-memory persistence"